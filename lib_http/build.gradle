plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdkVersion rootProject.hasProperty("compileSdkVersion") ? rootProject.compileSdkVersion : 28
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion rootProject.hasProperty("minSdkVersion") ? rootProject.minSdkVersion : 19
        targetSdkVersion rootProject.hasProperty("targetSdkVersion") ? rootProject.targetSdkVersion : 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
//
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//        }
//    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    def okhttpLog = rootProject.hasProperty("okhttpLoggingVersion") ? rootProject.okhttpLoggingVersion : '4.7.2'
    def retrofit = rootProject.hasProperty("retrofitVersion") ? rootProject.retrofitVersion : '2.9.0'
    def okhttp = rootProject.hasProperty("okhttpVersion") ? rootProject.okhttpVersion : '4.9.1'
    def coroutines = rootProject.hasProperty("coroutinesVersion") ? rootProject.coroutinesVersion : '1.4.2'
    print("okhttpLog $okhttpLog ,retrofit $retrofit okhttp $okhttp coroutines $coroutines")
    api "com.squareup.okhttp3:logging-interceptor:$okhttpLog"
    api "com.squareup.retrofit2:converter-gson:$retrofit"
    api "com.squareup.retrofit2:retrofit:$retrofit"
    api "com.squareup.okhttp3:okhttp:$okhttp"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'
}